from typing import List

from data_to_model.generators.dataclass_generator import DataClassBaseGenerator
from data_to_model.models.class_data import ClassData


expected_data_class = """This file was generated by data_to_model.
from dataclasses import dataclass
from typing import Any, Dict


@dataclass
class TestClass:
    field1: int
    field2: float
    field3: bool
    field4: str
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "TestClass":
        field1 = int(data['Field1'])
        field2 = float(data['Field2'])
        field3 = bool(data['Field3'])
        field4 = str(data['Field4'])
        return cls(field1=field1, field2=field2, field3=field3, field4=field4)
        
    def to_dict(self) -> Dict[str, Any]:
        return {"Field1": self.field1, "Field2": self.field2, "Field3": self.field3, "Field4": self.field4}
        
"""


def test_dataclass_generator(data_class: ClassData):
    dataclass_generator = DataClassBaseGenerator([data_class], "test_class.py")
    file_content = dataclass_generator.generate_file_content()
    assert file_content == expected_data_class
